-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity test_direct_dma is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    read_mover_V_V_TDATA : OUT STD_LOGIC_VECTOR (71 downto 0);
    read_mover_V_V_TVALID : OUT STD_LOGIC;
    read_mover_V_V_TREADY : IN STD_LOGIC;
    write_mover_V_V_TDATA : OUT STD_LOGIC_VECTOR (71 downto 0);
    write_mover_V_V_TVALID : OUT STD_LOGIC;
    write_mover_V_V_TREADY : IN STD_LOGIC;
    in_stream_V_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    in_stream_V_V_TVALID : IN STD_LOGIC;
    in_stream_V_V_TREADY : OUT STD_LOGIC;
    out_stream_V_V_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    out_stream_V_V_TVALID : OUT STD_LOGIC;
    out_stream_V_V_TREADY : IN STD_LOGIC;
    read_mover_halt : OUT STD_LOGIC;
    read_mover_halt_complete : IN STD_LOGIC;
    write_mover_halt : OUT STD_LOGIC;
    write_mover_halt_complete : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of test_direct_dma is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "test_direct_dma,hls_ip_2014_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.518000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal ap_ready : STD_LOGIC;
    signal sourceAddress : STD_LOGIC_VECTOR (31 downto 0);
    signal sourceAddress_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal sourceAddress_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sourceAddress_ap_vld : STD_LOGIC;
    signal sourceAddress_ap_vld_in_sig : STD_LOGIC;
    signal sourceAddress_ap_vld_preg : STD_LOGIC := '0';
    signal destinationAddress : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddress_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal destinationAddress_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal destinationAddress_ap_vld : STD_LOGIC;
    signal destinationAddress_ap_vld_in_sig : STD_LOGIC;
    signal destinationAddress_ap_vld_preg : STD_LOGIC := '0';
    signal length_r : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal length_r_ap_vld : STD_LOGIC;
    signal length_r_ap_vld_in_sig : STD_LOGIC;
    signal length_r_ap_vld_preg : STD_LOGIC := '0';
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_194_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_reg_258 : STD_LOGIC_VECTOR (27 downto 0);
    signal read_length_fu_198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_length_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_115 : BOOLEAN;
    signal ap_sig_ioackin_out_stream_V_V_TREADY : STD_LOGIC;
    signal i_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_mover_halt_complete_read_read_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_read_mover_V_V_TREADY : STD_LOGIC;
    signal ap_sig_ioackin_write_mover_V_V_TREADY : STD_LOGIC;
    signal sourceAddress_assign_fu_70 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_148 : BOOLEAN;
    signal destinationAddress_assign_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal length_assign_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_mover_halt_preg : STD_LOGIC := '0';
    signal read_mover_halt_complete_read_read_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_mover_halt_preg : STD_LOGIC := '0';
    signal ap_reg_ioackin_read_mover_V_V_TREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_write_mover_V_V_TREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_out_stream_V_V_TREADY : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_bdd_251 : BOOLEAN;
    signal ap_sig_bdd_250 : BOOLEAN;
    signal ap_sig_bdd_155 : BOOLEAN;

    component test_direct_dma_AXILiteS_s_axi IS
    generic (
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        sourceAddress : OUT STD_LOGIC_VECTOR (31 downto 0);
        sourceAddress_ap_vld : OUT STD_LOGIC;
        destinationAddress : OUT STD_LOGIC_VECTOR (31 downto 0);
        destinationAddress_ap_vld : OUT STD_LOGIC;
        length_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        length_r_ap_vld : OUT STD_LOGIC );
    end component;



begin
    test_direct_dma_AXILiteS_s_axi_U : component test_direct_dma_AXILiteS_s_axi
    generic map (
        C_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        sourceAddress => sourceAddress,
        sourceAddress_ap_vld => sourceAddress_ap_vld,
        destinationAddress => destinationAddress,
        destinationAddress_ap_vld => destinationAddress_ap_vld,
        length_r => length_r,
        length_r_ap_vld => length_r_ap_vld);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_out_stream_V_V_TREADY assign process. --
    ap_reg_ioackin_out_stream_V_V_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_out_stream_V_V_TREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_250) then
                    if (not((ap_sig_bdd_115 or (not((tmp_2_fu_228_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_out_stream_V_V_TREADY))))) then 
                        ap_reg_ioackin_out_stream_V_V_TREADY <= ap_const_logic_0;
                    elsif (ap_sig_bdd_251) then 
                        ap_reg_ioackin_out_stream_V_V_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_read_mover_V_V_TREADY assign process. --
    ap_reg_ioackin_read_mover_V_V_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_read_mover_V_V_TREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_155) then
                    if (not(((not((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2)) and (ap_const_logic_0 = ap_sig_ioackin_read_mover_V_V_TREADY)) or (not((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2)) and (ap_const_logic_0 = ap_sig_ioackin_write_mover_V_V_TREADY))))) then 
                        ap_reg_ioackin_read_mover_V_V_TREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = read_mover_V_V_TREADY)) then 
                        ap_reg_ioackin_read_mover_V_V_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_write_mover_V_V_TREADY assign process. --
    ap_reg_ioackin_write_mover_V_V_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_write_mover_V_V_TREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_155) then
                    if (not(((not((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2)) and (ap_const_logic_0 = ap_sig_ioackin_read_mover_V_V_TREADY)) or (not((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2)) and (ap_const_logic_0 = ap_sig_ioackin_write_mover_V_V_TREADY))))) then 
                        ap_reg_ioackin_write_mover_V_V_TREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = write_mover_V_V_TREADY)) then 
                        ap_reg_ioackin_write_mover_V_V_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- destinationAddress_ap_vld_preg assign process. --
    destinationAddress_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                destinationAddress_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (tmp_2_fu_228_p2 = ap_const_lv1_0) and not((ap_sig_bdd_115 or (not((tmp_2_fu_228_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_out_stream_V_V_TREADY)))))) then 
                    destinationAddress_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = destinationAddress_ap_vld))) then 
                    destinationAddress_ap_vld_preg <= destinationAddress_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- destinationAddress_preg assign process. --
    destinationAddress_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                destinationAddress_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = destinationAddress_ap_vld))) then 
                    destinationAddress_preg <= destinationAddress;
                end if; 
            end if;
        end if;
    end process;


    -- length_r_ap_vld_preg assign process. --
    length_r_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                length_r_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (tmp_2_fu_228_p2 = ap_const_lv1_0) and not((ap_sig_bdd_115 or (not((tmp_2_fu_228_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_out_stream_V_V_TREADY)))))) then 
                    length_r_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = length_r_ap_vld))) then 
                    length_r_ap_vld_preg <= length_r_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- length_r_preg assign process. --
    length_r_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                length_r_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))) and (ap_const_logic_1 = length_r_ap_vld))) then 
                    length_r_preg <= length_r;
                end if; 
            end if;
        end if;
    end process;


    -- read_mover_halt_preg assign process. --
    read_mover_halt_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                read_mover_halt_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = read_mover_halt_complete_read_read_fu_108_p2))) then 
                    read_mover_halt_preg <= ap_const_logic_0;
                elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
                    read_mover_halt_preg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- sourceAddress_ap_vld_preg assign process. --
    sourceAddress_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                sourceAddress_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (tmp_2_fu_228_p2 = ap_const_lv1_0) and not((ap_sig_bdd_115 or (not((tmp_2_fu_228_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_out_stream_V_V_TREADY)))))) then 
                    sourceAddress_ap_vld_preg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = sourceAddress_ap_vld) and not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))))) then 
                    sourceAddress_ap_vld_preg <= sourceAddress_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- sourceAddress_preg assign process. --
    sourceAddress_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                sourceAddress_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = sourceAddress_ap_vld) and not(((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_start))))) then 
                    sourceAddress_preg <= sourceAddress;
                end if; 
            end if;
        end if;
    end process;


    -- write_mover_halt_preg assign process. --
    write_mover_halt_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                write_mover_halt_preg <= ap_const_logic_0;
            else
                if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2) and not(((not((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2)) and (ap_const_logic_0 = ap_sig_ioackin_read_mover_V_V_TREADY)) or (not((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2)) and (ap_const_logic_0 = ap_sig_ioackin_write_mover_V_V_TREADY)))))) then 
                    write_mover_halt_preg <= ap_const_logic_0;
                elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = read_mover_halt_complete_read_read_fu_108_p2)))) then 
                    write_mover_halt_preg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_158 assign process. --
    i_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((tmp_2_fu_228_p2 = ap_const_lv1_0)) and not((ap_sig_bdd_115 or (not((tmp_2_fu_228_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_out_stream_V_V_TREADY)))))) then 
                i_reg_158 <= i_1_fu_234_p2;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2)) and not(((not((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2)) and (ap_const_logic_0 = ap_sig_ioackin_read_mover_V_V_TREADY)) or (not((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2)) and (ap_const_logic_0 = ap_sig_ioackin_write_mover_V_V_TREADY)))))) then 
                i_reg_158 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_148))) then
                destinationAddress_assign_fu_74 <= destinationAddress_in_sig;
                length_assign_fu_78 <= length_r_in_sig;
                sourceAddress_assign_fu_70 <= sourceAddress_in_sig;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                read_length_reg_264(4) <= read_length_fu_198_p2(4);
    read_length_reg_264(5) <= read_length_fu_198_p2(5);
    read_length_reg_264(6) <= read_length_fu_198_p2(6);
    read_length_reg_264(7) <= read_length_fu_198_p2(7);
    read_length_reg_264(8) <= read_length_fu_198_p2(8);
    read_length_reg_264(9) <= read_length_fu_198_p2(9);
    read_length_reg_264(10) <= read_length_fu_198_p2(10);
    read_length_reg_264(11) <= read_length_fu_198_p2(11);
    read_length_reg_264(12) <= read_length_fu_198_p2(12);
    read_length_reg_264(13) <= read_length_fu_198_p2(13);
    read_length_reg_264(14) <= read_length_fu_198_p2(14);
    read_length_reg_264(15) <= read_length_fu_198_p2(15);
    read_length_reg_264(16) <= read_length_fu_198_p2(16);
    read_length_reg_264(17) <= read_length_fu_198_p2(17);
    read_length_reg_264(18) <= read_length_fu_198_p2(18);
    read_length_reg_264(19) <= read_length_fu_198_p2(19);
    read_length_reg_264(20) <= read_length_fu_198_p2(20);
    read_length_reg_264(21) <= read_length_fu_198_p2(21);
    read_length_reg_264(22) <= read_length_fu_198_p2(22);
    read_length_reg_264(23) <= read_length_fu_198_p2(23);
    read_length_reg_264(24) <= read_length_fu_198_p2(24);
    read_length_reg_264(25) <= read_length_fu_198_p2(25);
    read_length_reg_264(26) <= read_length_fu_198_p2(26);
    read_length_reg_264(27) <= read_length_fu_198_p2(27);
    read_length_reg_264(28) <= read_length_fu_198_p2(28);
    read_length_reg_264(29) <= read_length_fu_198_p2(29);
    read_length_reg_264(30) <= read_length_fu_198_p2(30);
    read_length_reg_264(31) <= read_length_fu_198_p2(31);
                tmp_reg_258 <= tmp_fu_194_p1;
            end if;
        end if;
    end process;
    read_length_reg_264(3 downto 0) <= "0000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm , tmp_2_fu_228_p2 , ap_sig_bdd_115 , ap_sig_ioackin_out_stream_V_V_TREADY , write_mover_halt_complete_read_read_fu_123_p2 , ap_sig_ioackin_read_mover_V_V_TREADY , ap_sig_ioackin_write_mover_V_V_TREADY , ap_sig_bdd_148 , read_mover_halt_complete_read_read_fu_108_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_148)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = read_mover_halt_complete_read_read_fu_108_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((not((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2)) and not(((not((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2)) and (ap_const_logic_0 = ap_sig_ioackin_read_mover_V_V_TREADY)) or (not((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2)) and (ap_const_logic_0 = ap_sig_ioackin_write_mover_V_V_TREADY)))))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                elsif (((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2) and not(((not((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2)) and (ap_const_logic_0 = ap_sig_ioackin_read_mover_V_V_TREADY)) or (not((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2)) and (ap_const_logic_0 = ap_sig_ioackin_write_mover_V_V_TREADY)))))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (((tmp_2_fu_228_p2 = ap_const_lv1_0) and not((ap_sig_bdd_115 or (not((tmp_2_fu_228_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_out_stream_V_V_TREADY)))))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif ((not((tmp_2_fu_228_p2 = ap_const_lv1_0)) and not((ap_sig_bdd_115 or (not((tmp_2_fu_228_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_out_stream_V_V_TREADY)))))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, tmp_2_fu_228_p2, ap_sig_bdd_115, ap_sig_ioackin_out_stream_V_V_TREADY)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (tmp_2_fu_228_p2 = ap_const_lv1_0) and not((ap_sig_bdd_115 or (not((tmp_2_fu_228_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_out_stream_V_V_TREADY)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, tmp_2_fu_228_p2, ap_sig_bdd_115, ap_sig_ioackin_out_stream_V_V_TREADY)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (tmp_2_fu_228_p2 = ap_const_lv1_0) and not((ap_sig_bdd_115 or (not((tmp_2_fu_228_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_out_stream_V_V_TREADY)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= read_length_reg_264;

    -- ap_sig_bdd_115 assign process. --
    ap_sig_bdd_115_assign_proc : process(in_stream_V_V_TVALID, tmp_2_fu_228_p2)
    begin
                ap_sig_bdd_115 <= ((in_stream_V_V_TVALID = ap_const_logic_0) and not((tmp_2_fu_228_p2 = ap_const_lv1_0)));
    end process;


    -- ap_sig_bdd_148 assign process. --
    ap_sig_bdd_148_assign_proc : process(ap_start, sourceAddress_ap_vld_in_sig, destinationAddress_ap_vld_in_sig, length_r_ap_vld_in_sig)
    begin
                ap_sig_bdd_148 <= ((length_r_ap_vld_in_sig = ap_const_logic_0) or (destinationAddress_ap_vld_in_sig = ap_const_logic_0) or (sourceAddress_ap_vld_in_sig = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_155 assign process. --
    ap_sig_bdd_155_assign_proc : process(ap_CS_fsm, write_mover_halt_complete_read_read_fu_123_p2)
    begin
                ap_sig_bdd_155 <= ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2)));
    end process;


    -- ap_sig_bdd_250 assign process. --
    ap_sig_bdd_250_assign_proc : process(ap_CS_fsm, tmp_2_fu_228_p2)
    begin
                ap_sig_bdd_250 <= ((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((tmp_2_fu_228_p2 = ap_const_lv1_0)));
    end process;


    -- ap_sig_bdd_251 assign process. --
    ap_sig_bdd_251_assign_proc : process(out_stream_V_V_TREADY, ap_sig_bdd_115)
    begin
                ap_sig_bdd_251 <= ((ap_const_logic_1 = out_stream_V_V_TREADY) and not(ap_sig_bdd_115));
    end process;


    -- ap_sig_ioackin_out_stream_V_V_TREADY assign process. --
    ap_sig_ioackin_out_stream_V_V_TREADY_assign_proc : process(out_stream_V_V_TREADY, ap_reg_ioackin_out_stream_V_V_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_out_stream_V_V_TREADY)) then 
            ap_sig_ioackin_out_stream_V_V_TREADY <= out_stream_V_V_TREADY;
        else 
            ap_sig_ioackin_out_stream_V_V_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_read_mover_V_V_TREADY assign process. --
    ap_sig_ioackin_read_mover_V_V_TREADY_assign_proc : process(read_mover_V_V_TREADY, ap_reg_ioackin_read_mover_V_V_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_read_mover_V_V_TREADY)) then 
            ap_sig_ioackin_read_mover_V_V_TREADY <= read_mover_V_V_TREADY;
        else 
            ap_sig_ioackin_read_mover_V_V_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_write_mover_V_V_TREADY assign process. --
    ap_sig_ioackin_write_mover_V_V_TREADY_assign_proc : process(write_mover_V_V_TREADY, ap_reg_ioackin_write_mover_V_V_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_write_mover_V_V_TREADY)) then 
            ap_sig_ioackin_write_mover_V_V_TREADY <= write_mover_V_V_TREADY;
        else 
            ap_sig_ioackin_write_mover_V_V_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- destinationAddress_ap_vld_in_sig assign process. --
    destinationAddress_ap_vld_in_sig_assign_proc : process(destinationAddress_ap_vld, destinationAddress_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = destinationAddress_ap_vld)) then 
            destinationAddress_ap_vld_in_sig <= destinationAddress_ap_vld;
        else 
            destinationAddress_ap_vld_in_sig <= destinationAddress_ap_vld_preg;
        end if; 
    end process;


    -- destinationAddress_in_sig assign process. --
    destinationAddress_in_sig_assign_proc : process(destinationAddress, destinationAddress_preg, destinationAddress_ap_vld)
    begin
        if ((ap_const_logic_1 = destinationAddress_ap_vld)) then 
            destinationAddress_in_sig <= destinationAddress;
        else 
            destinationAddress_in_sig <= destinationAddress_preg;
        end if; 
    end process;

    i_1_fu_234_p2 <= std_logic_vector(unsigned(i_reg_158) + unsigned(ap_const_lv32_1));

    -- in_stream_V_V_TREADY assign process. --
    in_stream_V_V_TREADY_assign_proc : process(ap_CS_fsm, tmp_2_fu_228_p2, ap_sig_bdd_115, ap_sig_ioackin_out_stream_V_V_TREADY)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((tmp_2_fu_228_p2 = ap_const_lv1_0)) and not((ap_sig_bdd_115 or (not((tmp_2_fu_228_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_out_stream_V_V_TREADY)))))) then 
            in_stream_V_V_TREADY <= ap_const_logic_1;
        else 
            in_stream_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- length_r_ap_vld_in_sig assign process. --
    length_r_ap_vld_in_sig_assign_proc : process(length_r_ap_vld, length_r_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = length_r_ap_vld)) then 
            length_r_ap_vld_in_sig <= length_r_ap_vld;
        else 
            length_r_ap_vld_in_sig <= length_r_ap_vld_preg;
        end if; 
    end process;


    -- length_r_in_sig assign process. --
    length_r_in_sig_assign_proc : process(length_r, length_r_preg, length_r_ap_vld)
    begin
        if ((ap_const_logic_1 = length_r_ap_vld)) then 
            length_r_in_sig <= length_r;
        else 
            length_r_in_sig <= length_r_preg;
        end if; 
    end process;

    out_stream_V_V_TDATA <= in_stream_V_V_TDATA;

    -- out_stream_V_V_TVALID assign process. --
    out_stream_V_V_TVALID_assign_proc : process(ap_CS_fsm, tmp_2_fu_228_p2, ap_sig_bdd_115, ap_reg_ioackin_out_stream_V_V_TREADY)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((tmp_2_fu_228_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_115) and (ap_const_logic_0 = ap_reg_ioackin_out_stream_V_V_TREADY))) then 
            out_stream_V_V_TVALID <= ap_const_logic_1;
        else 
            out_stream_V_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    read_length_fu_198_p2 <= std_logic_vector(shift_left(unsigned(length_assign_fu_78),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    read_mover_V_V_TDATA <= (((ap_const_lv8_0 & sourceAddress_assign_fu_70) & tmp_reg_258) & ap_const_lv4_0);

    -- read_mover_V_V_TVALID assign process. --
    read_mover_V_V_TVALID_assign_proc : process(ap_CS_fsm, write_mover_halt_complete_read_read_fu_123_p2, ap_reg_ioackin_read_mover_V_V_TREADY)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2)) and (ap_const_logic_0 = ap_reg_ioackin_read_mover_V_V_TREADY))) then 
            read_mover_V_V_TVALID <= ap_const_logic_1;
        else 
            read_mover_V_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- read_mover_halt assign process. --
    read_mover_halt_assign_proc : process(ap_CS_fsm, read_mover_halt_preg, read_mover_halt_complete_read_read_fu_108_p2)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = read_mover_halt_complete_read_read_fu_108_p2))) then 
            read_mover_halt <= ap_const_logic_0;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            read_mover_halt <= ap_const_logic_1;
        else 
            read_mover_halt <= read_mover_halt_preg;
        end if; 
    end process;

    read_mover_halt_complete_read_read_fu_108_p2 <= (0=>read_mover_halt_complete, others=>'-');

    -- sourceAddress_ap_vld_in_sig assign process. --
    sourceAddress_ap_vld_in_sig_assign_proc : process(sourceAddress_ap_vld, sourceAddress_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = sourceAddress_ap_vld)) then 
            sourceAddress_ap_vld_in_sig <= sourceAddress_ap_vld;
        else 
            sourceAddress_ap_vld_in_sig <= sourceAddress_ap_vld_preg;
        end if; 
    end process;


    -- sourceAddress_in_sig assign process. --
    sourceAddress_in_sig_assign_proc : process(sourceAddress, sourceAddress_preg, sourceAddress_ap_vld)
    begin
        if ((ap_const_logic_1 = sourceAddress_ap_vld)) then 
            sourceAddress_in_sig <= sourceAddress;
        else 
            sourceAddress_in_sig <= sourceAddress_preg;
        end if; 
    end process;

    tmp_2_fu_228_p2 <= "1" when (signed(i_reg_158) < signed(length_assign_fu_78)) else "0";
    tmp_fu_194_p1 <= length_assign_fu_78(28 - 1 downto 0);
    write_mover_V_V_TDATA <= (((ap_const_lv8_0 & destinationAddress_assign_fu_74) & tmp_reg_258) & ap_const_lv4_0);

    -- write_mover_V_V_TVALID assign process. --
    write_mover_V_V_TVALID_assign_proc : process(ap_CS_fsm, write_mover_halt_complete_read_read_fu_123_p2, ap_reg_ioackin_write_mover_V_V_TREADY)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2)) and (ap_const_logic_0 = ap_reg_ioackin_write_mover_V_V_TREADY))) then 
            write_mover_V_V_TVALID <= ap_const_logic_1;
        else 
            write_mover_V_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- write_mover_halt assign process. --
    write_mover_halt_assign_proc : process(ap_CS_fsm, write_mover_halt_complete_read_read_fu_123_p2, ap_sig_ioackin_read_mover_V_V_TREADY, ap_sig_ioackin_write_mover_V_V_TREADY, read_mover_halt_complete_read_read_fu_108_p2, write_mover_halt_preg)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2) and not(((not((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2)) and (ap_const_logic_0 = ap_sig_ioackin_read_mover_V_V_TREADY)) or (not((ap_const_lv1_0 = write_mover_halt_complete_read_read_fu_123_p2)) and (ap_const_logic_0 = ap_sig_ioackin_write_mover_V_V_TREADY)))))) then 
            write_mover_halt <= ap_const_logic_0;
        elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = read_mover_halt_complete_read_read_fu_108_p2)))) then 
            write_mover_halt <= ap_const_logic_1;
        else 
            write_mover_halt <= write_mover_halt_preg;
        end if; 
    end process;

    write_mover_halt_complete_read_read_fu_123_p2 <= (0=>write_mover_halt_complete, others=>'-');
end behav;
