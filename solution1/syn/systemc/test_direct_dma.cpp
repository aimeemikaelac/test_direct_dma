// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "test_direct_dma.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic test_direct_dma::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic test_direct_dma::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> test_direct_dma::ap_ST_st1_fsm_0 = "000";
const sc_lv<3> test_direct_dma::ap_ST_st2_fsm_1 = "1";
const sc_lv<3> test_direct_dma::ap_ST_st3_fsm_2 = "10";
const sc_lv<3> test_direct_dma::ap_ST_st4_fsm_3 = "11";
const sc_lv<3> test_direct_dma::ap_ST_st5_fsm_4 = "100";
const sc_lv<32> test_direct_dma::ap_const_lv32_0 = "00000000000000000000000000000000";
const int test_direct_dma::C_DATA_WIDTH = "100000";
const sc_lv<1> test_direct_dma::ap_const_lv1_0 = "0";
const sc_lv<1> test_direct_dma::ap_const_lv1_1 = "1";
const sc_lv<32> test_direct_dma::ap_const_lv32_4 = "100";
const sc_lv<8> test_direct_dma::ap_const_lv8_0 = "00000000";
const sc_lv<4> test_direct_dma::ap_const_lv4_0 = "0000";
const sc_lv<32> test_direct_dma::ap_const_lv32_1 = "1";

test_direct_dma::test_direct_dma(sc_module_name name) : sc_module(name), mVcdFile(0) {
    test_direct_dma_AXILiteS_s_axi_U = new test_direct_dma_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("test_direct_dma_AXILiteS_s_axi_U");
    test_direct_dma_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    test_direct_dma_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    test_direct_dma_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    test_direct_dma_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    test_direct_dma_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    test_direct_dma_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    test_direct_dma_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    test_direct_dma_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    test_direct_dma_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    test_direct_dma_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    test_direct_dma_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    test_direct_dma_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    test_direct_dma_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    test_direct_dma_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    test_direct_dma_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    test_direct_dma_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    test_direct_dma_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    test_direct_dma_AXILiteS_s_axi_U->ACLK(ap_clk);
    test_direct_dma_AXILiteS_s_axi_U->ARESETN(ap_rst_n);
    test_direct_dma_AXILiteS_s_axi_U->ap_start(ap_start);
    test_direct_dma_AXILiteS_s_axi_U->interrupt(interrupt);
    test_direct_dma_AXILiteS_s_axi_U->ap_ready(ap_ready);
    test_direct_dma_AXILiteS_s_axi_U->ap_done(ap_done);
    test_direct_dma_AXILiteS_s_axi_U->ap_idle(ap_idle);
    test_direct_dma_AXILiteS_s_axi_U->ap_return(ap_return);
    test_direct_dma_AXILiteS_s_axi_U->sourceAddress(sourceAddress);
    test_direct_dma_AXILiteS_s_axi_U->sourceAddress_ap_vld(sourceAddress_ap_vld);
    test_direct_dma_AXILiteS_s_axi_U->destinationAddress(destinationAddress);
    test_direct_dma_AXILiteS_s_axi_U->destinationAddress_ap_vld(destinationAddress_ap_vld);
    test_direct_dma_AXILiteS_s_axi_U->length_r(length_r);
    test_direct_dma_AXILiteS_s_axi_U->length_r_ap_vld(length_r_ap_vld);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_fu_228_p2 );
    sensitive << ( ap_sig_bdd_115 );
    sensitive << ( ap_sig_ioackin_out_stream_V_V_TREADY );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_fu_228_p2 );
    sensitive << ( ap_sig_bdd_115 );
    sensitive << ( ap_sig_ioackin_out_stream_V_V_TREADY );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm );
    sensitive << ( read_length_reg_264 );
    sensitive << ( tmp_2_fu_228_p2 );
    sensitive << ( ap_sig_bdd_115 );
    sensitive << ( ap_sig_ioackin_out_stream_V_V_TREADY );

    SC_METHOD(thread_ap_sig_bdd_115);
    sensitive << ( in_stream_V_V_TVALID );
    sensitive << ( tmp_2_fu_228_p2 );

    SC_METHOD(thread_ap_sig_bdd_148);
    sensitive << ( ap_start );
    sensitive << ( sourceAddress_ap_vld_in_sig );
    sensitive << ( destinationAddress_ap_vld_in_sig );
    sensitive << ( length_r_ap_vld_in_sig );

    SC_METHOD(thread_ap_sig_bdd_155);
    sensitive << ( ap_CS_fsm );
    sensitive << ( write_mover_halt_complete_read_read_fu_123_p2 );

    SC_METHOD(thread_ap_sig_bdd_250);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_fu_228_p2 );

    SC_METHOD(thread_ap_sig_bdd_251);
    sensitive << ( out_stream_V_V_TREADY );
    sensitive << ( ap_sig_bdd_115 );

    SC_METHOD(thread_ap_sig_ioackin_out_stream_V_V_TREADY);
    sensitive << ( out_stream_V_V_TREADY );
    sensitive << ( ap_reg_ioackin_out_stream_V_V_TREADY );

    SC_METHOD(thread_ap_sig_ioackin_read_mover_V_V_TREADY);
    sensitive << ( read_mover_V_V_TREADY );
    sensitive << ( ap_reg_ioackin_read_mover_V_V_TREADY );

    SC_METHOD(thread_ap_sig_ioackin_write_mover_V_V_TREADY);
    sensitive << ( write_mover_V_V_TREADY );
    sensitive << ( ap_reg_ioackin_write_mover_V_V_TREADY );

    SC_METHOD(thread_destinationAddress_ap_vld_in_sig);
    sensitive << ( destinationAddress_ap_vld );
    sensitive << ( destinationAddress_ap_vld_preg );

    SC_METHOD(thread_destinationAddress_in_sig);
    sensitive << ( destinationAddress );
    sensitive << ( destinationAddress_preg );
    sensitive << ( destinationAddress_ap_vld );

    SC_METHOD(thread_i_1_fu_234_p2);
    sensitive << ( i_reg_158 );

    SC_METHOD(thread_in_stream_V_V_TREADY);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_fu_228_p2 );
    sensitive << ( ap_sig_bdd_115 );
    sensitive << ( ap_sig_ioackin_out_stream_V_V_TREADY );

    SC_METHOD(thread_length_r_ap_vld_in_sig);
    sensitive << ( length_r_ap_vld );
    sensitive << ( length_r_ap_vld_preg );

    SC_METHOD(thread_length_r_in_sig);
    sensitive << ( length_r );
    sensitive << ( length_r_preg );
    sensitive << ( length_r_ap_vld );

    SC_METHOD(thread_out_stream_V_V_TDATA);
    sensitive << ( ap_CS_fsm );
    sensitive << ( in_stream_V_V_TDATA );
    sensitive << ( tmp_2_fu_228_p2 );
    sensitive << ( ap_sig_bdd_115 );
    sensitive << ( ap_sig_ioackin_out_stream_V_V_TREADY );

    SC_METHOD(thread_out_stream_V_V_TVALID);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_fu_228_p2 );
    sensitive << ( ap_sig_bdd_115 );
    sensitive << ( ap_reg_ioackin_out_stream_V_V_TREADY );

    SC_METHOD(thread_read_length_fu_198_p2);
    sensitive << ( length_assign_fu_78 );

    SC_METHOD(thread_read_mover_V_V_TDATA);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_reg_258 );
    sensitive << ( write_mover_halt_complete_read_read_fu_123_p2 );
    sensitive << ( ap_sig_ioackin_read_mover_V_V_TREADY );
    sensitive << ( ap_sig_ioackin_write_mover_V_V_TREADY );
    sensitive << ( sourceAddress_assign_fu_70 );

    SC_METHOD(thread_read_mover_V_V_TVALID);
    sensitive << ( ap_CS_fsm );
    sensitive << ( write_mover_halt_complete_read_read_fu_123_p2 );
    sensitive << ( ap_reg_ioackin_read_mover_V_V_TREADY );

    SC_METHOD(thread_read_mover_halt);
    sensitive << ( ap_CS_fsm );
    sensitive << ( read_mover_halt_preg );
    sensitive << ( read_mover_halt_complete_read_read_fu_108_p2 );

    SC_METHOD(thread_read_mover_halt_complete_read_read_fu_108_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( read_mover_halt_complete );

    SC_METHOD(thread_sourceAddress_ap_vld_in_sig);
    sensitive << ( sourceAddress_ap_vld );
    sensitive << ( sourceAddress_ap_vld_preg );

    SC_METHOD(thread_sourceAddress_in_sig);
    sensitive << ( sourceAddress );
    sensitive << ( sourceAddress_preg );
    sensitive << ( sourceAddress_ap_vld );

    SC_METHOD(thread_tmp_2_fu_228_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_fu_228_p2 );
    sensitive << ( ap_sig_bdd_115 );
    sensitive << ( ap_sig_ioackin_out_stream_V_V_TREADY );
    sensitive << ( i_reg_158 );
    sensitive << ( length_assign_fu_78 );

    SC_METHOD(thread_tmp_fu_194_p1);
    sensitive << ( length_assign_fu_78 );

    SC_METHOD(thread_write_mover_V_V_TDATA);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_reg_258 );
    sensitive << ( write_mover_halt_complete_read_read_fu_123_p2 );
    sensitive << ( ap_sig_ioackin_read_mover_V_V_TREADY );
    sensitive << ( ap_sig_ioackin_write_mover_V_V_TREADY );
    sensitive << ( destinationAddress_assign_fu_74 );

    SC_METHOD(thread_write_mover_V_V_TVALID);
    sensitive << ( ap_CS_fsm );
    sensitive << ( write_mover_halt_complete_read_read_fu_123_p2 );
    sensitive << ( ap_reg_ioackin_write_mover_V_V_TREADY );

    SC_METHOD(thread_write_mover_halt);
    sensitive << ( ap_CS_fsm );
    sensitive << ( write_mover_halt_complete_read_read_fu_123_p2 );
    sensitive << ( ap_sig_ioackin_read_mover_V_V_TREADY );
    sensitive << ( ap_sig_ioackin_write_mover_V_V_TREADY );
    sensitive << ( read_mover_halt_complete_read_read_fu_108_p2 );
    sensitive << ( write_mover_halt_preg );

    SC_METHOD(thread_write_mover_halt_complete_read_read_fu_123_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( write_mover_halt_complete );
    sensitive << ( write_mover_halt_complete_read_read_fu_123_p2 );
    sensitive << ( ap_sig_ioackin_read_mover_V_V_TREADY );
    sensitive << ( ap_sig_ioackin_write_mover_V_V_TREADY );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_fu_228_p2 );
    sensitive << ( ap_sig_bdd_115 );
    sensitive << ( ap_sig_ioackin_out_stream_V_V_TREADY );
    sensitive << ( write_mover_halt_complete_read_read_fu_123_p2 );
    sensitive << ( ap_sig_ioackin_read_mover_V_V_TREADY );
    sensitive << ( ap_sig_ioackin_write_mover_V_V_TREADY );
    sensitive << ( ap_sig_bdd_148 );
    sensitive << ( read_mover_halt_complete_read_read_fu_108_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000";
    sourceAddress_preg = "00000000000000000000000000000000";
    sourceAddress_ap_vld_preg = SC_LOGIC_0;
    destinationAddress_preg = "00000000000000000000000000000000";
    destinationAddress_ap_vld_preg = SC_LOGIC_0;
    length_r_preg = "00000000000000000000000000000000";
    length_r_ap_vld_preg = SC_LOGIC_0;
    read_mover_halt_preg = SC_LOGIC_0;
    write_mover_halt_preg = SC_LOGIC_0;
    ap_reg_ioackin_read_mover_V_V_TREADY = SC_LOGIC_0;
    ap_reg_ioackin_write_mover_V_V_TREADY = SC_LOGIC_0;
    ap_reg_ioackin_out_stream_V_V_TREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "test_direct_dma_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, read_mover_V_V_TDATA, "(port)read_mover_V_V_TDATA");
    sc_trace(mVcdFile, read_mover_V_V_TVALID, "(port)read_mover_V_V_TVALID");
    sc_trace(mVcdFile, read_mover_V_V_TREADY, "(port)read_mover_V_V_TREADY");
    sc_trace(mVcdFile, write_mover_V_V_TDATA, "(port)write_mover_V_V_TDATA");
    sc_trace(mVcdFile, write_mover_V_V_TVALID, "(port)write_mover_V_V_TVALID");
    sc_trace(mVcdFile, write_mover_V_V_TREADY, "(port)write_mover_V_V_TREADY");
    sc_trace(mVcdFile, in_stream_V_V_TDATA, "(port)in_stream_V_V_TDATA");
    sc_trace(mVcdFile, in_stream_V_V_TVALID, "(port)in_stream_V_V_TVALID");
    sc_trace(mVcdFile, in_stream_V_V_TREADY, "(port)in_stream_V_V_TREADY");
    sc_trace(mVcdFile, out_stream_V_V_TDATA, "(port)out_stream_V_V_TDATA");
    sc_trace(mVcdFile, out_stream_V_V_TVALID, "(port)out_stream_V_V_TVALID");
    sc_trace(mVcdFile, out_stream_V_V_TREADY, "(port)out_stream_V_V_TREADY");
    sc_trace(mVcdFile, read_mover_halt, "(port)read_mover_halt");
    sc_trace(mVcdFile, read_mover_halt_complete, "(port)read_mover_halt_complete");
    sc_trace(mVcdFile, write_mover_halt, "(port)write_mover_halt");
    sc_trace(mVcdFile, write_mover_halt_complete, "(port)write_mover_halt_complete");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, sourceAddress, "sourceAddress");
    sc_trace(mVcdFile, sourceAddress_in_sig, "sourceAddress_in_sig");
    sc_trace(mVcdFile, sourceAddress_preg, "sourceAddress_preg");
    sc_trace(mVcdFile, sourceAddress_ap_vld, "sourceAddress_ap_vld");
    sc_trace(mVcdFile, sourceAddress_ap_vld_in_sig, "sourceAddress_ap_vld_in_sig");
    sc_trace(mVcdFile, sourceAddress_ap_vld_preg, "sourceAddress_ap_vld_preg");
    sc_trace(mVcdFile, destinationAddress, "destinationAddress");
    sc_trace(mVcdFile, destinationAddress_in_sig, "destinationAddress_in_sig");
    sc_trace(mVcdFile, destinationAddress_preg, "destinationAddress_preg");
    sc_trace(mVcdFile, destinationAddress_ap_vld, "destinationAddress_ap_vld");
    sc_trace(mVcdFile, destinationAddress_ap_vld_in_sig, "destinationAddress_ap_vld_in_sig");
    sc_trace(mVcdFile, destinationAddress_ap_vld_preg, "destinationAddress_ap_vld_preg");
    sc_trace(mVcdFile, length_r, "length_r");
    sc_trace(mVcdFile, length_r_in_sig, "length_r_in_sig");
    sc_trace(mVcdFile, length_r_preg, "length_r_preg");
    sc_trace(mVcdFile, length_r_ap_vld, "length_r_ap_vld");
    sc_trace(mVcdFile, length_r_ap_vld_in_sig, "length_r_ap_vld_in_sig");
    sc_trace(mVcdFile, length_r_ap_vld_preg, "length_r_ap_vld_preg");
    sc_trace(mVcdFile, ap_return, "ap_return");
    sc_trace(mVcdFile, tmp_fu_194_p1, "tmp_fu_194_p1");
    sc_trace(mVcdFile, tmp_reg_258, "tmp_reg_258");
    sc_trace(mVcdFile, read_length_fu_198_p2, "read_length_fu_198_p2");
    sc_trace(mVcdFile, read_length_reg_264, "read_length_reg_264");
    sc_trace(mVcdFile, i_1_fu_234_p2, "i_1_fu_234_p2");
    sc_trace(mVcdFile, tmp_2_fu_228_p2, "tmp_2_fu_228_p2");
    sc_trace(mVcdFile, ap_sig_bdd_115, "ap_sig_bdd_115");
    sc_trace(mVcdFile, ap_sig_ioackin_out_stream_V_V_TREADY, "ap_sig_ioackin_out_stream_V_V_TREADY");
    sc_trace(mVcdFile, i_reg_158, "i_reg_158");
    sc_trace(mVcdFile, write_mover_halt_complete_read_read_fu_123_p2, "write_mover_halt_complete_read_read_fu_123_p2");
    sc_trace(mVcdFile, ap_sig_ioackin_read_mover_V_V_TREADY, "ap_sig_ioackin_read_mover_V_V_TREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_write_mover_V_V_TREADY, "ap_sig_ioackin_write_mover_V_V_TREADY");
    sc_trace(mVcdFile, sourceAddress_assign_fu_70, "sourceAddress_assign_fu_70");
    sc_trace(mVcdFile, ap_sig_bdd_148, "ap_sig_bdd_148");
    sc_trace(mVcdFile, destinationAddress_assign_fu_74, "destinationAddress_assign_fu_74");
    sc_trace(mVcdFile, length_assign_fu_78, "length_assign_fu_78");
    sc_trace(mVcdFile, read_mover_halt_preg, "read_mover_halt_preg");
    sc_trace(mVcdFile, read_mover_halt_complete_read_read_fu_108_p2, "read_mover_halt_complete_read_read_fu_108_p2");
    sc_trace(mVcdFile, write_mover_halt_preg, "write_mover_halt_preg");
    sc_trace(mVcdFile, ap_reg_ioackin_read_mover_V_V_TREADY, "ap_reg_ioackin_read_mover_V_V_TREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_write_mover_V_V_TREADY, "ap_reg_ioackin_write_mover_V_V_TREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_out_stream_V_V_TREADY, "ap_reg_ioackin_out_stream_V_V_TREADY");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_bdd_251, "ap_sig_bdd_251");
    sc_trace(mVcdFile, ap_sig_bdd_250, "ap_sig_bdd_250");
    sc_trace(mVcdFile, ap_sig_bdd_155, "ap_sig_bdd_155");
#endif

    }
    mHdltvinHandle.open("test_direct_dma.hdltvin.dat");
    mHdltvoutHandle.open("test_direct_dma.hdltvout.dat");
}

test_direct_dma::~test_direct_dma() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete test_direct_dma_AXILiteS_s_axi_U;
}

void test_direct_dma::thread_ap_clk_no_reset_() {
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_reg_ioackin_out_stream_V_V_TREADY = ap_const_logic_0;
    } else {
        if (ap_sig_bdd_250.read()) {
            if (!(ap_sig_bdd_115.read() || (!esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_out_stream_V_V_TREADY.read())))) {
                ap_reg_ioackin_out_stream_V_V_TREADY = ap_const_logic_0;
            } else if (ap_sig_bdd_251.read()) {
                ap_reg_ioackin_out_stream_V_V_TREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_reg_ioackin_read_mover_V_V_TREADY = ap_const_logic_0;
    } else {
        if (ap_sig_bdd_155.read()) {
            if (!((!esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_read_mover_V_V_TREADY.read())) || (!esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_write_mover_V_V_TREADY.read())))) {
                ap_reg_ioackin_read_mover_V_V_TREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, read_mover_V_V_TREADY.read())) {
                ap_reg_ioackin_read_mover_V_V_TREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_reg_ioackin_write_mover_V_V_TREADY = ap_const_logic_0;
    } else {
        if (ap_sig_bdd_155.read()) {
            if (!((!esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_read_mover_V_V_TREADY.read())) || (!esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_write_mover_V_V_TREADY.read())))) {
                ap_reg_ioackin_write_mover_V_V_TREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, write_mover_V_V_TREADY.read())) {
                ap_reg_ioackin_write_mover_V_V_TREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        destinationAddress_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) && 
             esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && 
             !(ap_sig_bdd_115.read() || (!esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_out_stream_V_V_TREADY.read()))))) {
            destinationAddress_ap_vld_preg = ap_const_logic_0;
        } else if ((!(esl_seteq<1,3,3>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, destinationAddress_ap_vld.read()))) {
            destinationAddress_ap_vld_preg = destinationAddress_ap_vld.read();
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        destinationAddress_preg = ap_const_lv32_0;
    } else {
        if ((!(esl_seteq<1,3,3>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, destinationAddress_ap_vld.read()))) {
            destinationAddress_preg = destinationAddress.read();
        }
    }
    if ((esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && 
         !(ap_sig_bdd_115.read() || (!esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_out_stream_V_V_TREADY.read()))))) {
        i_reg_158 = i_1_fu_234_p2.read();
    } else if ((esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && 
                !((!esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_read_mover_V_V_TREADY.read())) || (!esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_write_mover_V_V_TREADY.read()))))) {
        i_reg_158 = ap_const_lv32_0;
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        length_r_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) && 
             esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && 
             !(ap_sig_bdd_115.read() || (!esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_out_stream_V_V_TREADY.read()))))) {
            length_r_ap_vld_preg = ap_const_logic_0;
        } else if ((!(esl_seteq<1,3,3>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, length_r_ap_vld.read()))) {
            length_r_ap_vld_preg = length_r_ap_vld.read();
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        length_r_preg = ap_const_lv32_0;
    } else {
        if ((!(esl_seteq<1,3,3>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, length_r_ap_vld.read()))) {
            length_r_preg = length_r.read();
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        read_mover_halt_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,3,3>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, read_mover_halt_complete_read_read_fu_108_p2.read()))) {
            read_mover_halt_preg =  (sc_logic) (ap_const_lv1_0[0]);
        } else if (esl_seteq<1,3,3>(ap_ST_st2_fsm_1, ap_CS_fsm.read())) {
            read_mover_halt_preg =  (sc_logic) (ap_const_lv1_1[0]);
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        sourceAddress_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) && 
             esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && 
             !(ap_sig_bdd_115.read() || (!esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_out_stream_V_V_TREADY.read()))))) {
            sourceAddress_ap_vld_preg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, sourceAddress_ap_vld.read()) && 
                    !(esl_seteq<1,3,3>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())))) {
            sourceAddress_ap_vld_preg = sourceAddress_ap_vld.read();
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        sourceAddress_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, sourceAddress_ap_vld.read()) && 
             !(esl_seteq<1,3,3>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())))) {
            sourceAddress_preg = sourceAddress.read();
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        write_mover_halt_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && 
             !((!esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_read_mover_V_V_TREADY.read())) || (!esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_write_mover_V_V_TREADY.read()))))) {
            write_mover_halt_preg =  (sc_logic) (ap_const_lv1_0[0]);
        } else if ((esl_seteq<1,3,3>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
                    !esl_seteq<1,1,1>(ap_const_lv1_0, read_mover_halt_complete_read_read_fu_108_p2.read()))) {
            write_mover_halt_preg =  (sc_logic) (ap_const_lv1_1[0]);
        }
    }
    if ((esl_seteq<1,3,3>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && !ap_sig_bdd_148.read())) {
        destinationAddress_assign_fu_74 = destinationAddress_in_sig.read();
        length_assign_fu_78 = length_r_in_sig.read();
        sourceAddress_assign_fu_70 = sourceAddress_in_sig.read();
    }
    if (esl_seteq<1,3,3>(ap_ST_st2_fsm_1, ap_CS_fsm.read())) {
        read_length_reg_264 = read_length_fu_198_p2.read();
        tmp_reg_258 = tmp_fu_194_p1.read();
    }
}

void test_direct_dma::thread_ap_done() {
    if ((esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && 
         !(ap_sig_bdd_115.read() || (!esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_out_stream_V_V_TREADY.read()))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void test_direct_dma::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,3,3>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void test_direct_dma::thread_ap_ready() {
    if ((esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && 
         !(ap_sig_bdd_115.read() || (!esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_out_stream_V_V_TREADY.read()))))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void test_direct_dma::thread_ap_return() {
    ap_return = read_length_reg_264.read();
}

void test_direct_dma::thread_ap_sig_bdd_115() {
    ap_sig_bdd_115 = (esl_seteq<1,1,1>(in_stream_V_V_TVALID.read(), ap_const_logic_0) && !esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0));
}

void test_direct_dma::thread_ap_sig_bdd_148() {
    ap_sig_bdd_148 = (esl_seteq<1,1,1>(length_r_ap_vld_in_sig.read(), ap_const_logic_0) || esl_seteq<1,1,1>(destinationAddress_ap_vld_in_sig.read(), ap_const_logic_0) || esl_seteq<1,1,1>(sourceAddress_ap_vld_in_sig.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0));
}

void test_direct_dma::thread_ap_sig_bdd_155() {
    ap_sig_bdd_155 = (esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()));
}

void test_direct_dma::thread_ap_sig_bdd_250() {
    ap_sig_bdd_250 = (esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) && !esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0));
}

void test_direct_dma::thread_ap_sig_bdd_251() {
    ap_sig_bdd_251 = (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_V_TREADY.read()) && !ap_sig_bdd_115.read());
}

void test_direct_dma::thread_ap_sig_ioackin_out_stream_V_V_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_out_stream_V_V_TREADY.read())) {
        ap_sig_ioackin_out_stream_V_V_TREADY = out_stream_V_V_TREADY.read();
    } else {
        ap_sig_ioackin_out_stream_V_V_TREADY = ap_const_logic_1;
    }
}

void test_direct_dma::thread_ap_sig_ioackin_read_mover_V_V_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_read_mover_V_V_TREADY.read())) {
        ap_sig_ioackin_read_mover_V_V_TREADY = read_mover_V_V_TREADY.read();
    } else {
        ap_sig_ioackin_read_mover_V_V_TREADY = ap_const_logic_1;
    }
}

void test_direct_dma::thread_ap_sig_ioackin_write_mover_V_V_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_write_mover_V_V_TREADY.read())) {
        ap_sig_ioackin_write_mover_V_V_TREADY = write_mover_V_V_TREADY.read();
    } else {
        ap_sig_ioackin_write_mover_V_V_TREADY = ap_const_logic_1;
    }
}

void test_direct_dma::thread_destinationAddress_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, destinationAddress_ap_vld.read())) {
        destinationAddress_ap_vld_in_sig = destinationAddress_ap_vld.read();
    } else {
        destinationAddress_ap_vld_in_sig = destinationAddress_ap_vld_preg.read();
    }
}

void test_direct_dma::thread_destinationAddress_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, destinationAddress_ap_vld.read())) {
        destinationAddress_in_sig = destinationAddress.read();
    } else {
        destinationAddress_in_sig = destinationAddress_preg.read();
    }
}

void test_direct_dma::thread_i_1_fu_234_p2() {
    i_1_fu_234_p2 = (!i_reg_158.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(i_reg_158.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void test_direct_dma::thread_in_stream_V_V_TREADY() {
    if ((esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && 
         !(ap_sig_bdd_115.read() || (!esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_out_stream_V_V_TREADY.read()))))) {
        in_stream_V_V_TREADY = ap_const_logic_1;
    } else {
        in_stream_V_V_TREADY = ap_const_logic_0;
    }
}

void test_direct_dma::thread_length_r_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, length_r_ap_vld.read())) {
        length_r_ap_vld_in_sig = length_r_ap_vld.read();
    } else {
        length_r_ap_vld_in_sig = length_r_ap_vld_preg.read();
    }
}

void test_direct_dma::thread_length_r_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, length_r_ap_vld.read())) {
        length_r_in_sig = length_r.read();
    } else {
        length_r_in_sig = length_r_preg.read();
    }
}

void test_direct_dma::thread_out_stream_V_V_TDATA() {
    out_stream_V_V_TDATA = in_stream_V_V_TDATA.read();
}

void test_direct_dma::thread_out_stream_V_V_TVALID() {
    if ((esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && 
         !ap_sig_bdd_115.read() && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_out_stream_V_V_TREADY.read()))) {
        out_stream_V_V_TVALID = ap_const_logic_1;
    } else {
        out_stream_V_V_TVALID = ap_const_logic_0;
    }
}

void test_direct_dma::thread_read_length_fu_198_p2() {
    read_length_fu_198_p2 = (!ap_const_lv32_4.is_01())? sc_lv<32>(): length_assign_fu_78.read() << (unsigned short)ap_const_lv32_4.to_uint();
}

void test_direct_dma::thread_read_mover_V_V_TDATA() {
    read_mover_V_V_TDATA = esl_concat<68,4>(esl_concat<40,28>(esl_concat<8,32>(ap_const_lv8_0, sourceAddress_assign_fu_70.read()), tmp_reg_258.read()), ap_const_lv4_0);
}

void test_direct_dma::thread_read_mover_V_V_TVALID() {
    if ((esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_read_mover_V_V_TREADY.read()))) {
        read_mover_V_V_TVALID = ap_const_logic_1;
    } else {
        read_mover_V_V_TVALID = ap_const_logic_0;
    }
}

void test_direct_dma::thread_read_mover_halt() {
    if ((esl_seteq<1,3,3>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, read_mover_halt_complete_read_read_fu_108_p2.read()))) {
        read_mover_halt =  (sc_logic) (ap_const_lv1_0[0]);
    } else if (esl_seteq<1,3,3>(ap_ST_st2_fsm_1, ap_CS_fsm.read())) {
        read_mover_halt =  (sc_logic) (ap_const_lv1_1[0]);
    } else {
        read_mover_halt = read_mover_halt_preg.read();
    }
}

void test_direct_dma::thread_read_mover_halt_complete_read_read_fu_108_p2() {
    read_mover_halt_complete_read_read_fu_108_p2 =  (sc_lv<1>) (read_mover_halt_complete.read());
}

void test_direct_dma::thread_sourceAddress_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, sourceAddress_ap_vld.read())) {
        sourceAddress_ap_vld_in_sig = sourceAddress_ap_vld.read();
    } else {
        sourceAddress_ap_vld_in_sig = sourceAddress_ap_vld_preg.read();
    }
}

void test_direct_dma::thread_sourceAddress_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, sourceAddress_ap_vld.read())) {
        sourceAddress_in_sig = sourceAddress.read();
    } else {
        sourceAddress_in_sig = sourceAddress_preg.read();
    }
}

void test_direct_dma::thread_tmp_2_fu_228_p2() {
    tmp_2_fu_228_p2 = (!i_reg_158.read().is_01() || !length_assign_fu_78.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_reg_158.read()) < sc_bigint<32>(length_assign_fu_78.read()));
}

void test_direct_dma::thread_tmp_fu_194_p1() {
    tmp_fu_194_p1 = length_assign_fu_78.read().range(28-1, 0);
}

void test_direct_dma::thread_write_mover_V_V_TDATA() {
    write_mover_V_V_TDATA = esl_concat<68,4>(esl_concat<40,28>(esl_concat<8,32>(ap_const_lv8_0, destinationAddress_assign_fu_74.read()), tmp_reg_258.read()), ap_const_lv4_0);
}

void test_direct_dma::thread_write_mover_V_V_TVALID() {
    if ((esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_write_mover_V_V_TREADY.read()))) {
        write_mover_V_V_TVALID = ap_const_logic_1;
    } else {
        write_mover_V_V_TVALID = ap_const_logic_0;
    }
}

void test_direct_dma::thread_write_mover_halt() {
    if ((esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && 
         !((!esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_read_mover_V_V_TREADY.read())) || (!esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_write_mover_V_V_TREADY.read()))))) {
        write_mover_halt =  (sc_logic) (ap_const_lv1_0[0]);
    } else if ((esl_seteq<1,3,3>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, read_mover_halt_complete_read_read_fu_108_p2.read()))) {
        write_mover_halt =  (sc_logic) (ap_const_lv1_1[0]);
    } else {
        write_mover_halt = write_mover_halt_preg.read();
    }
}

void test_direct_dma::thread_write_mover_halt_complete_read_read_fu_123_p2() {
    write_mover_halt_complete_read_read_fu_123_p2 =  (sc_lv<1>) (write_mover_halt_complete.read());
}

void test_direct_dma::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            if (!ap_sig_bdd_148.read()) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, read_mover_halt_complete_read_read_fu_108_p2.read())) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 3 : 
            if ((!esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && !((!esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_read_mover_V_V_TREADY.read())) || (!esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_write_mover_V_V_TREADY.read()))))) {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && !((!esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_read_mover_V_V_TREADY.read())) || (!esl_seteq<1,1,1>(ap_const_lv1_0, write_mover_halt_complete_read_read_fu_123_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_write_mover_V_V_TREADY.read()))))) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && !(ap_sig_bdd_115.read() || (!esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_out_stream_V_V_TREADY.read()))))) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else if ((!esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && !(ap_sig_bdd_115.read() || (!esl_seteq<1,1,1>(tmp_2_fu_228_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_out_stream_V_V_TREADY.read()))))) {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}
void test_direct_dma::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"read_mover_V_V_TDATA\" :  \"" << read_mover_V_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"read_mover_V_V_TVALID\" :  \"" << read_mover_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"read_mover_V_V_TREADY\" :  \"" << read_mover_V_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"write_mover_V_V_TDATA\" :  \"" << write_mover_V_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"write_mover_V_V_TVALID\" :  \"" << write_mover_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"write_mover_V_V_TREADY\" :  \"" << write_mover_V_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_V_V_TDATA\" :  \"" << in_stream_V_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_V_V_TVALID\" :  \"" << in_stream_V_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_stream_V_V_TREADY\" :  \"" << in_stream_V_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_V_V_TDATA\" :  \"" << out_stream_V_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_V_V_TVALID\" :  \"" << out_stream_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_stream_V_V_TREADY\" :  \"" << out_stream_V_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"read_mover_halt\" :  \"" << read_mover_halt.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"read_mover_halt_complete\" :  \"" << read_mover_halt_complete.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"write_mover_halt\" :  \"" << write_mover_halt.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"write_mover_halt_complete\" :  \"" << write_mover_halt_complete.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

